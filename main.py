import datetime
import os
import random
import string
import pyrogram
from db import BotDB
from config import db_path
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, Message, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InputMediaPhoto
from asyncio import sleep
import asyncio
import re
from loader import app
import logging
from logging import log
from pyrogram.errors import BotGroupsBlocked, ChatInvalid, FloodWait, UserDeactivated, MessageDeleteForbidden
import json
import requests
from pyrogram.types import ChatPermissions
from locales.keyboard import Button

BotDB = BotDB(db_path)
helps = f"üßë‚Äçüíª**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å, –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\nüìû**–°–≤—è–∑—å:**  @vo7_admin\nüè†**–î–æ–º–æ–π:**  /start"

#sell_data
sell_photo = {}
sell_model = {}
sell_budjet = {}
sell_city = {}
sell_description = {}
sell_contact = {}

#buy_data
buy_photo = {}
buy_model = {}
buy_budjet = {}
buy_city = {}
buy_description = {}
buy_contact = {}

#user_data
photo = {}
model = {}
budjet = {}
photo = {}
city = {}
desc = {}
contact = {}
description = {}
group_photos = []

# Configure logging
logging.basicConfig(level=logging.INFO)

# logging.basicConfig(level=logging.INFO)
log = logging.getLogger('broadcast')


BotDB.CreateTableUsers()
BotDB.CreateTablePosts()













# --------- locales ----------
def generate_photoname(length=15):
	letters = string.ascii_lowercase
	rand_string = ''.join(random.choice(letters) for i in range(length))
	return rand_string

def get_users():
	"""
	Return users list

	In this example returns some random ID's
	"""
	yield from (451658425, 608551286, 78378343, 98765431, 12345678)


async def send_messages(user_id: int, text: str, disable_notification: bool = False) -> bool:
	"""
	Safe messages sender

	:param user_id:
	:param text:
	:param disable_notification:
	:return:
	"""
	try:
		await app.send_message(user_id, text, disable_notification=disable_notification)
	except BotGroupsBlocked:
		log.error(f"Target [ID:{user_id}]: blocked by user")
	except ChatInvalid:
		log.error(f"Target [ID:{user_id}]: invalid user ID")
	except FloodWait as e:
		log.error(f"Target [ID:{user_id}]: Flood limit is exceeded. Sleep {e.timeout} seconds.")
		await asyncio.sleep(e.timeout)
		return await send_messages(user_id, text)  # Recursive call
	except UserDeactivated:
		log.error(f"Target [ID:{user_id}]: user is deactivated")
	else:
		log.info(f"Target [ID:{user_id}]: success")
		return True
	return False

async def broadcaster() -> int:
	"""
	Simple broadcaster

	:return: Count of messages
	"""
	count = 0
	try:
		for user_id in get_users():
			if await send_messages(user_id, '<b>Hello!</b>'):
				count += 1
			await asyncio.sleep(.05)  # 20 messages per second (Limit: 30 messages per second)
	finally:
		log.info(f"{count} messages successful sent.")

	return count


def DeleteExtraInfo(user_id):
	"""deleting extra users where id is user_id"""
	with open('locales/message_urls') as f:
		lines = f.readlines()
	pattern = re.compile(re.escape(str(user_id)))
	with open('locales/message_urls', 'w') as f:
		for line in lines:
			result = pattern.search(line)
			if result is None:
				f.write(line) 
				
def data():
	parse_date = str(datetime.datetime.now().date()).replace("datetime.date", "").replace("(", "").replace(")", "")
	parse_time = str(datetime.datetime.now().time()).split(".")
	parse_time = parse_time[0]
	return [parse_time, parse_date]



# ----------- Commands ----------- #
@app.on_message(filters.command('start', prefixes='/') & filters.private)
async def on_Start(_, c):
	"""On 'start' mess handler"""
	photo_counter[c.from_user.id] = 0
	sell_photo[c.from_user.id] = 0
	sell_model[c.from_user.id] = 0
	sell_budjet[c.from_user.id] = 0
	sell_city[c.from_user.id] = 0
	sell_description[c.from_user.id] = 0
	sell_contact[c.from_user.id] = 0

	#buy_data
	buy_photo[c.from_user.id] = 0
	buy_model[c.from_user.id] = 0
	buy_budjet[c.from_user.id] = 0
	buy_city[c.from_user.id] = 0
	buy_description[c.from_user.id] = 0
	buy_contact[c.from_user.id] = 0
	reg_date = data()
	reg_date = reg_date[0] + " " + reg_date[1]
	
	# –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏–¥
	with open("locales/message_urls") as openfile:
		for line in openfile:
			if f'{c.from_user.id}' in line:
				txt_message_id = int(line.replace('\n', '').replace(" ", "").split(",")[1])
				try:
					await app.delete_messages(c.from_user.id, txt_message_id)
				except MessageDeleteForbidden:
					pass
	openfile.close()
	DeleteExtraInfo(c.from_user.id)
	if c.from_user is not None:
		message_id = c.id
		username = c.from_user.username
		is_bot = 0
		language_code = 0
		chat_id = c.chat.id
		user_id = c.from_user.id
		first_name = c.from_user.first_name
		texts = c.text
		type1 = "private"
		bot_message_language = 0
		balance = 0
		orders = 0
		role = None

		# add users
		day_limit = 50

		inf_list = (user_id, chat_id, bot_message_language, language_code, message_id, is_bot,
					first_name, username, role, texts, type1, balance, reg_date, orders)

		BotDB.AddUser(inf_list) #method AddUser for add user to data base
		txt_export = open("locales/message_urls", 'a+')
		user_id = c.chat.id
		# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç
		txt_export.write(
			f"{str(c.chat.id)}, {str(c.id)}\n")  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, all users
		start_message = f"‚úåüèª**–ü—Ä–∏–≤–µ—Ç, {c.from_user.first_name}!\nüçé–Ø –±–æ—Ç-–±–∞—Ä–∞—Ö–æ–ª–∫–∏!**\n**–Ø –º–æ–≥—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—é**\nüìä–ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é"
		await app.send_message(chat_id, start_message, 
		reply_markup=InlineKeyboardMarkup([[
		InlineKeyboardButton("üí∏–ö—É–ø–∏—Ç—å", callback_data=f"buy"), 
		InlineKeyboardButton("ü§ù–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell"), 
		InlineKeyboardButton("üõ†–ó–∞–ø—á–∞—Å—Ç–∏", url=f"t.me/gsm_zapchasti")], 
		[InlineKeyboardButton("üè•–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã", callback_data=f"service_centre"),
		 InlineKeyboardButton("‚ù§Ô∏è‚Äçüî•–î–æ–Ω–∞—Ç / –û–ø–ª–∞—Ç–∞", callback_data=f"donate_or_pay")], 
		[InlineKeyboardButton("üì∞–ù–æ–≤–æ—Å—Ç–∏", url=f"t.me/apple_news_belarus"),
		 InlineKeyboardButton("üåê–û –Ω–∞—Å", callback_data=f"by_as")], 
		[InlineKeyboardButton("‚ÅâÔ∏è–ü–æ–º–æ—â—å|–†–µ–≥–ª–∞–º–µ–Ω—Ç", callback_data=f"help")]]))

@app.on_message(filters.command('help', prefixes='/') & filters.private)
async def on_Help(_, c):
	await c.reply(helps)













@app.on_callback_query(filters.create(lambda _, __, c: c.data == "sell"))
async def sellButton(_, c):
	photo_counter[c.from_user.id] = 0
	sell_photo[c.from_user.id] = 0
	sell_model[c.from_user.id] = 0
	sell_budjet[c.from_user.id] = 0
	sell_city[c.from_user.id] = 0
	sell_description[c.from_user.id] = 0
	sell_contact[c.from_user.id] = 0

	#buy_data
	buy_photo[c.from_user.id] = 0
	buy_model[c.from_user.id] = 0
	buy_budjet[c.from_user.id] = 0
	buy_city[c.from_user.id] = 0
	buy_description[c.from_user.id] = 0
	buy_contact[c.from_user.id] = 0
	await c.edit_message_text("üí∏–ö–∞–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n–≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=InlineKeyboardMarkup([[
		InlineKeyboardButton("üÜï–ù–æ–≤–∞—è", url=f"t.me/vo7_admin"), InlineKeyboardButton("üÜó–ë|–£", f"sell_was/used")],
		[InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", f"menu")]]))

@app.on_callback_query(filters.create(lambda _, __, c: c.data == "sell_was/used"))
async def sell_wasusedButton(_, c):
	if c.from_user.id in photo:
		await c.edit_message_text(f"üì∏–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_model_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", f'new_sellphoto')]]))
		
	else:
		sell_photo[c.from_user.id] = 1
		await c.edit_message_text("üì∏–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n–í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n```–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", f"sell")]]))


photo_counter = {}

@app.on_message(filters.create(lambda _, __, c: sell_photo[c.from_user.id] == 1) & filters.private)
async def get_photo(_, c):
	photo_counter[c.from_user.id] += 1
	count = photo_counter[c.from_user.id]
	
	if c.text is not None:
		await c.reply("üò•__–ö–∞–∂–∏—Å—å –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ__")

	else:
		photo[c.from_user.id] = generate_photoname()
		group_photos.append(f"{c.from_user.id} {photo[c.from_user.id]}")
		await app.download_media(c.photo, f"data/sell/{c.from_user.id} {photo[c.from_user.id]}.png")
		if count == 1:
			await app.send_message(c.chat.id, f"üì∏–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_model_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", f'new_sellphoto')]]))
		sell_photo[c.from_user.id] = 0
		photo_counter[c.from_user.id] = 0




@app.on_message(filters.create(lambda _, __, c: sell_model[c.from_user.id] == 1) & filters.private)
async def get_model(_, c):
	if len(c.text) < 3:
			await app.send_message(c.chat.id, "üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f'sell_model_w/u')]]))
	else:
		model[c.from_user.id] = c.text
		sell_model[c.from_user.id] = 0
		await app.send_message(c.chat.id, f"üì±–ú–æ–¥–µ–ª—å: {c.text}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_budjet_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellmodel')]]))





@app.on_callback_query(filters.create(lambda _, __, c: "sell_budjet_w/u" == c.data))
async def sell_budjetwasusedButton(_, c):
	
	if c.from_user.id in budjet:
		await c.edit_message_text(f"üí∞–¶–µ–Ω–∞ –¥–æ: {budjet[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_contact_inform_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellbudjet')]]))
	else:
		sell_budjet[c.from_user.id] = 1
		await c.edit_message_text("üí∞–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n–≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "sell_model_w/u")]]))





@app.on_callback_query(filters.create(lambda _, __, c: c.data == "sell_model_w/u"))
async def sell_model_wasusedButton(_, c):
	if c.from_user.id in model:
		await c.edit_message_text(f"üì±–ú–æ–¥–µ–ª—å: {model[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_budjet_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellmodel')]]))
		
	else:
		sell_model[c.from_user.id] = 1
		await c.edit_message_text("üì±–£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n–∫–æ—Ç–æ—Ä—É—é –í—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\n__(–ø—Ä–∏–º–µ—Ä: Apple iPhone 11 64gb Black):__\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", f"sell_was/used")]]))


@app.on_message(filters.create(lambda _, __, c: sell_budjet[c.from_user.id] == 1) & filters.private)
async def get_model(_, c):
	if len(c.text) < 2:
		await c.reply("üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f'sell_model_w/u')]]))
	else:
		sell_budjet[c.from_user.id] = 0
		budjet[c.from_user.id] = c.text
		await c.reply(f"üí∞–¶–µ–Ω–∞ –¥–æ: {budjet[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_contact_inform_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellbudjet')]]))

@app.on_message(filters.create(lambda _, __, c: sell_description[c.from_user.id] == 1) & filters.private)
async def get_budjet(_, c):
	if len(c.text) < 2:
		await app.send_message(c.chat.id,"üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f"sell_description_w/u")]]))

	else:
		description[c.from_user.id] = c.text
		sell_description[c.from_user.id] = 0
		await app.send_message(c.chat.id, f"üìÉ–í—ã –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_post_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_selldescription')]]))



@app.on_message(filters.create(lambda _, __, c: sell_contact[c.from_user.id] == 1) & filters.private)
async def get_contacts(_, c):
	if len(c.text) < 2:
		await app.send_message(c.chat.id, "üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f"sell_budjet_w/u")]]))

	else:
		sell_contact[c.from_user.id] = 0
		contact[c.from_user.id] = c.text
		await app.send_message(c.chat.id, f"üìû–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {c.text}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_city_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_contact')]]))


@app.on_message(filters.create(lambda _, __, c: sell_city[c.from_user.id] == 1) & filters.private)
async def get_city(_, c):
	if len(c.text) < 2:
		await app.send_message(c.chat.id,  "üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f"sell_city_w/u")]]))

	else:
		city[c.from_user.id] = c.text
		sell_city[c.from_user.id] = 0
		await app.send_message(c.chat.id, f"üèô–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞: {c.text}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_description_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellcity')]]))












@app.on_callback_query(filters.create(lambda _, __, c: "sell_contact_inform_w/u" in c.data))
async def sell_contactwasusedButton(_, c):
	if c.from_user.id in contact:
		await c.edit_message_text(f"üìû–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {contact[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_city_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellcontact')]]))
	else:
		sell_contact[c.from_user.id] = 1
		await c.edit_message_text("üìû–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "sell_budjet_w/u")]]))





@app.on_callback_query(filters.create(lambda _, __, c: "sell_city_w/u" in c.data))
async def sell_citywasusedButton(_, c):
	if c.from_user.id in city:
		await c.edit_message_text(f"üèô–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞: {city[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_description_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_sellcity')]]))
	else:
		sell_city[c.from_user.id] = 1
		await c.edit_message_text("üèô–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω—É\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "sell_contact_inform_w/u")]]))

@app.on_callback_query(filters.create(lambda _, __, c: "sell_description_w/u" == c.data))
async def sell_descriptionwasusedButton(_, c):
	if c.from_user.id in description:
		await c.edit_message_text(f"üìÉ–í—ã –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__",reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"sell_post_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_selldescription')]]))
	else:
		sell_description[c.from_user.id] = 1
		await c.edit_message_text("üìÉ–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏—á–∏–Ω—É –∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏ –≤—ã—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "sell_city_w/u")]]))










@app.on_callback_query(filters.create(lambda _, __, c: "sell_post_w/u" == c.data))
async def postwasusedButton(_, c):
	s_photo = photo[c.from_user.id]
	name = c.from_user.mention()
	device = model[c.from_user.id]
	whats_trade = budjet[c.from_user.id]
	desc = description[c.from_user.id]
	place = city[c.from_user.id]
	
	text = f"""
	üíº–ü–æ—Å—Ç –æ –ø—Ä–æ–¥–∞–∂–µ:

	```{device}```

	__{desc}__

	üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å: ```{whats_trade}```

	{place}

	‚òé–ö–æ–Ω—Ç–∞–∫—Ç—ã/—Ç–≥: {contact[c.from_user.id]}
				"""
	await c.edit_message_text(text + "\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?\n‚ùó**–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –¥–æ 80% –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏!**\n__–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ __**‚ö†–ë—ã—Å—Ç—Ä–æ**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å", f"send_to_chat_sell")], [InlineKeyboardButton("‚ö†–ë—ã—Å—Ç—Ä–æ", f"send_to_chat_fast")], [InlineKeyboardButton("üîÅ–ò—Å–ø—Ä–∞–≤–∏—Ç—å", f"edit_sell_post")]]))


@app.on_callback_query(filters.create(lambda _, __, c: "edit_sell_post" == c.data))
async def edit_buy_postButton(_, c):
	await c.edit_message_text("üîÅ–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì∏—Ñ–æ—Ç–æ", "sell_was/used")], [InlineKeyboardButton("üì±–º–æ–¥–µ–ª—å", "sell_model_w/u")], [InlineKeyboardButton("üí∞–±—é–¥–∂–µ—Ç", "sell_budjet_w/u")], [InlineKeyboardButton("‚òé–∫–æ–Ω—Ç–∞–∫—Ç—ã", "sell_contact_inform_w/u")], [InlineKeyboardButton("üåÜ—Å—Ç—Ä–∞–Ω—É/–≥–æ—Ä–æ–¥", "sell_city_w/u")], [InlineKeyboardButton("üìÉ–æ–ø–∏—Å–∞–Ω–∏–µ", "sell_description_w/u")], [InlineKeyboardButton("–≤–µ—Ä–Ω—É—Ç—å—Å—è", "sell_post_w/u")]]))


@app.on_callback_query(filters.create(lambda _, __, c: "send_to_chat_sell" == c.data))
async def sendtochatBuyPostButton(_, c):
	s_photo = photo[c.from_user.id]
	desc = description[c.from_user.id]
	user_id = c.from_user.id
	name = c.from_user.first_name
	device = model[c.from_user.id]
	whats_trade = budjet[c.from_user.id]
	place = city[c.from_user.id]
	reg_date = data()
	reg_date = reg_date[0] + " " + reg_date[1]
	text = f"""
	üíº–ü–æ—Å—Ç –æ –ø—Ä–æ–¥–∞–∂–µ:

	```{device}```

	__{desc}__

	üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å: ```{whats_trade}```

	{place}
	‚òé–ö–æ–Ω—Ç–∞–∫—Ç—ã/—Ç–≥: {contact[c.from_user.id]}
				"""
	inf_list = (user_id, c.id, text, device, name, place, desc, reg_date,
						whats_trade)
	BotDB.AddPost(inf_list)
	await c.edit_message_text("‚úÖ–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É @apple_belarus", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìä–º–µ–Ω—é", f"menu")]]))
	board = []
	i = 0
	for inputs in group_photos:
		if f"{c.from_user.id}" in inputs:
			i += 1
			if i == 1:
				board.append(InputMediaPhoto("data/sell/" + inputs + ".png", caption=text + "\n\nü§ñ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: @vo7_bot"))
			else:
				board.append(InputMediaPhoto("data/sell/" + inputs + ".png"))

		

	await app.send_media_group('apple_belarus', board)
	
	model.pop(c.from_user.id)
	budjet.pop(c.from_user.id)
	contact.pop(c.from_user.id)
	city.pop(c.from_user.id)
	description.pop(c.from_user.id)
	for i in group_photos:
		if f"{c.from_user.id}" in i:
			os.remove("data/sell/" + i + ".png")
			group_photos.remove(i)
	photo.pop(c.from_user.id)




@app.on_callback_query(filters.create(lambda _, __, c: "send_to_chat_fast" == c.data))
async def sendtochatfastPostButton(_, c):
	s_photo = photo[c.from_user.id]
	desc = description[c.from_user.id]
	user_id = c.from_user.id
	name = c.from_user.first_name
	device = model[c.from_user.id]
	whats_trade = budjet[c.from_user.id]
	place = city[c.from_user.id]
	reg_date = data()
	reg_date = reg_date[0] + " " + reg_date[1]
	text = f"""
	‚ö†–ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞
	üíº–ü–æ—Å—Ç –æ –ø—Ä–æ–¥–∞–∂–µ:

	```{device}```

	__{desc}__

	üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å: ```{whats_trade}```

	{place}
	‚òé–ö–æ–Ω—Ç–∞–∫—Ç—ã/—Ç–≥: {contact[c.from_user.id]}

				"""
	inf_list = (user_id, c.id, text, device, name, place, desc, reg_date,
						whats_trade)
	BotDB.AddPost(inf_list)
	await c.edit_message_text("‚úÖ–°–ø–∞—Å–∏–±–æ! –ë–ª–∏–∂–∞–π—à–∏–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìä–º–µ–Ω—é", f"menu")]]))
	board = []
	i = 0
	for inputs in group_photos:
		if f"{c.from_user.id}" in inputs:
			i += 1
			if i == 1:
				board.append(InputMediaPhoto("data/sell/" + inputs + ".png", caption=text + "\n\nü§ñ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: @vo7_bot"))
			else:
				board.append(InputMediaPhoto("data/sell/" + inputs + ".png"))
	
	await app.send_media_group('vo7_admin', board)

	model.pop(c.from_user.id)
	budjet.pop(c.from_user.id)
	contact.pop(c.from_user.id)
	city.pop(c.from_user.id)
	description.pop(c.from_user.id)
	for i in group_photos:
		if f"{c.from_user.id}" in i:
			os.remove("data/sell/" + i + ".png")
			group_photos.remove(i)
	photo.pop(c.from_user.id)







@app.on_callback_query(filters.create(lambda _, __, c: c.data == "buy"))
async def buyButton(_, c):
	photo_counter[c.from_user.id] = 0
	sell_photo[c.from_user.id] = 0
	sell_model[c.from_user.id] = 0
	sell_budjet[c.from_user.id] = 0
	sell_city[c.from_user.id] = 0
	sell_description[c.from_user.id] = 0
	sell_contact[c.from_user.id] = 0

	#buy_data
	buy_photo[c.from_user.id] = 0
	buy_model[c.from_user.id] = 0
	buy_budjet[c.from_user.id] = 0
	buy_city[c.from_user.id] = 0
	buy_description[c.from_user.id] = 0
	buy_contact[c.from_user.id] = 0
	await c.edit_message_text("üí∏–ö–∞–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n–≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=InlineKeyboardMarkup([[
		InlineKeyboardButton("üÜï–ù–æ–≤–∞—è", url=f"t.me/vo7_admin"), InlineKeyboardButton("üÜó–ë|–£", f"was/used")],
		[InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", f"menu")]]))

@app.on_callback_query(filters.create(lambda _, __, c: c.data == "menu"))
async def menuButton(_, c):
	photo_counter[c.from_user.id] = 0
	sell_photo[c.from_user.id] = 0
	sell_model[c.from_user.id] = 0
	sell_budjet[c.from_user.id] = 0
	sell_city[c.from_user.id] = 0
	sell_description[c.from_user.id] = 0
	sell_contact[c.from_user.id] = 0

	#buy_data
	buy_photo[c.from_user.id] = 0
	buy_model[c.from_user.id] = 0
	buy_budjet[c.from_user.id] = 0
	buy_city[c.from_user.id] = 0
	buy_description[c.from_user.id] = 0
	buy_contact[c.from_user.id] = 0
	start_message = f"üìä–ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é"
	await c.edit_message_text(
		start_message,
		reply_markup=InlineKeyboardMarkup([[
		InlineKeyboardButton("üí∏–ö—É–ø–∏—Ç—å", callback_data=f"buy"), 
		InlineKeyboardButton("ü§ù–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell"), 
		InlineKeyboardButton("üõ†–ó–∞–ø—á–∞—Å—Ç–∏", url=f"t.me/gsm_zapchasti")], 
		[InlineKeyboardButton("üè•–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã", callback_data=f"service_centre"),
		 InlineKeyboardButton("‚ù§Ô∏è‚Äçüî•–î–æ–Ω–∞—Ç / –û–ø–ª–∞—Ç–∞", url=f"t.me/vo7_admin")], 
		[InlineKeyboardButton("üì∞–ù–æ–≤–æ—Å—Ç–∏", url=f"t.me/apple_news_belarus"),
		 InlineKeyboardButton("üåê–û –Ω–∞—Å", callback_data=f"by_as")], 
		[InlineKeyboardButton("‚ÅâÔ∏è–ü–æ–º–æ—â—å|–†–µ–≥–ª–∞–º–µ–Ω—Ç", callback_data=f"help")]]))


@app.on_callback_query(filters.create(lambda _, __, c: c.data == "service_centre"))
async def service_centreButton(_, c):
	await c.edit_message_text("üíº–•–æ—Ç–∏—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∫—É?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìä–ó–∞–∫–ª—é—á–∏—Ç—å", url="t.me/vo7_admin")], [InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", f"menu")]]))



@app.on_callback_query(filters.create(lambda _, __, c: c.data == "help"))
async def helpButton(_, c):
	await c.edit_message_text(f"‚ÅâÔ∏è–ü–æ–º–æ—â—å|–†–µ–≥–ª–∞–º–µ–Ω—Ç", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", url="t.me/vo7_admin"),InlineKeyboardButton("‚ùì–†–µ–≥–ª–∞–º–µ–Ω—Ç", url="https://clck.ru/S7CAn")], [InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", f"menu")]]))



@app.on_callback_query(filters.create(lambda _, __, c: c.data == "by_as"))
async def by_asButton(_, c):
	await c.edit_message_text(f"üåê–û –Ω–∞—Å:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë•–ì—Ä—É–ø–ø—ã", "groups"),InlineKeyboardButton("üíª–°–∞–π—Ç", url="vo7.by")],[InlineKeyboardButton("VK", url="vk.com/vo7by"), InlineKeyboardButton("Instagram", url="instagram.com/apple_belarus_minsk")],  [InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", f"menu")]]))




@app.on_callback_query(filters.create(lambda _, __, c: c.data == "groups"))
async def groupsButton(_, c):
	await c.edit_message_text("üë•–ì—Ä—É–ø–ø—ã", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì±Samsung", url="t.me/samsung_belarus")], 
	[InlineKeyboardButton("üì±Xiaomi", url="t.me/mi_belarus")],
	[InlineKeyboardButton("üçéApple", url="t.me/apple_belarus")],
	[InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", "by_as")]]))










@app.on_callback_query(filters.create(lambda _, __, c: c.data == "was/used"))
async def wasusedButton(_, c):
	if c.from_user.id in model:
		await c.edit_message_text(f"üì±–ú–æ–¥–µ–ª—å: {model[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"budjet_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_model')]]))
		
	else:
		buy_model[c.from_user.id] = 1
		await c.edit_message_text("üì±–£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n–∫–æ—Ç–æ—Ä—É—é –í—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\n__(–ø—Ä–∏–º–µ—Ä: Apple iPhone 11 64gb Black):__\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", f"buy")]]))





@app.on_callback_query(filters.create(lambda _, __, c: "budjet_w/u" in c.data))
async def budjetwasusedButton(_, c):
	
	if c.from_user.id in budjet:
		await c.edit_message_text(f"üí∞–ë—é–¥–∂–µ—Ç –¥–æ: {budjet[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"contact_inform_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_budjet')]]))
	else:
		buy_budjet[c.from_user.id] = 1
		await c.edit_message_text("üí∞–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞\n–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "was/used")]]))


@app.on_callback_query(filters.create(lambda _, __, c: "new_" in c.data))
async def newwasusedButton(_, c):
	new = c.data.split("new_")[1]
	match new:
		case "model":
			model.pop(c.from_user.id)
			await wasusedButton(_, c)
		case "budjet":
			budjet.pop(c.from_user.id)
			await budjetwasusedButton(_, c)
		case "contact":
			contact.pop(c.from_user.id)
			await contactwasusedButton(_, c)
		case "city":
			city.pop(c.from_user.id)
			await citywasusedButton(_, c)
		case "sellphoto":
			for i in group_photos:
				if f"{c.from_user.id}" in i:
					os.remove("data/sell/" + i + ".png")
					group_photos.remove(i)
			photo.pop(c.from_user.id)
			
			await sell_wasusedButton(_, c)
		case "sellmodel":
			model.pop(c.from_user.id)
			await sell_model_wasusedButton(_, c)
		case "sellbudjet":
			budjet.pop(c.from_user.id)
			await sell_budjetwasusedButton(_, c)
		case "sellcontact":
			contact.pop(c.from_user.id)
			await sell_contactwasusedButton(_, c)
		case "sellcity":
			description.pop(c.from_user.id)
			await sell_descriptionwasusedButton(_, c)

		case "selldescription":
			city.pop(c.from_user.id)
			await sell_citywasusedButton(_, c)	

@app.on_callback_query(filters.create(lambda _, __, c: "contact_inform_w/u" in c.data))
async def contactwasusedButton(_, c):
	if c.from_user.id in contact:
		await c.edit_message_text(f"‚òé–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {contact[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"city_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_contact')]]))
	else:
		buy_contact[c.from_user.id] = 1
		await c.edit_message_text("‚òé–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "budjet_w/u")]]))


@app.on_callback_query(filters.create(lambda _, __, c: "city_w/u" in c.data))
async def citywasusedButton(_, c):
	if c.from_user.id in city:
		await c.edit_message_text(f"üåÜ–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞: {city[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"post_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_city')]]))
	else:
		buy_city[c.from_user.id] = 1
		await c.edit_message_text("üåÜ–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω—É\n\n```–æ–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ!```", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´–û—Ç–º–µ–Ω–∞", "contact_inform_w/u")]]))

@app.on_callback_query(filters.create(lambda _, __, c: "post_w/u" == c.data))
async def postwasusedButton(_, c):
	name = c.from_user.mention()
	device = model[c.from_user.id]
	whats_trade = budjet[c.from_user.id]
	place = city[c.from_user.id]
	
	text = f"""
	üíº–ü–æ—Å—Ç –æ –ø–æ–∫—É–ø–∫–µ:

	```{device}```
	
	üí∞**–¶–µ–Ω–∞ –¥–æ:** {whats_trade}

	{place}
	‚òé**–ö–æ–Ω—Ç–∞–∫—Ç—ã/—Ç–≥: {contact[c.from_user.id]}
				"""
	await c.edit_message_text(text + "\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å", f"send_to_chat_buy")], [InlineKeyboardButton("üîÅ–ò—Å–ø—Ä–∞–≤–∏—Ç—å", f"edit_buy_post")]]))



@app.on_callback_query(filters.create(lambda _, __, c: "edit_buy_post" == c.data))
async def edit_buy_postButton(_, c):
	await c.edit_message_text("üîÅ–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì±–º–æ–¥–µ–ª—å", "was/used")], [InlineKeyboardButton("üí∞–±—é–¥–∂–µ—Ç", "budjet_w/u")], [InlineKeyboardButton("‚òé–∫–æ–Ω—Ç–∞–∫—Ç—ã", "contact_inform_w/u")], [InlineKeyboardButton("üåÜ—Å—Ç—Ä–∞–Ω—É/–≥–æ—Ä–æ–¥", "city_w/u")], [InlineKeyboardButton("–≤–µ—Ä–Ω—É—Ç—å—Å—è", "post_w/u")]]))





@app.on_message(filters.create(lambda _, __, c: buy_model[c.from_user.id] == 1)& filters.private)
async def get_model(_, c):
	if len(c.text) < 3:
			await app.send_message(c.chat.id, "üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f'was/used')]]))
	else:
		model[c.from_user.id] = c.text
		buy_model[c.from_user.id] = 0
		await app.send_message(c.chat.id, f"üì±–ú–æ–¥–µ–ª—å: {c.text}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"budjet_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_model')]]))

@app.on_message(filters.create(lambda _, __, c: buy_budjet[c.from_user.id] == 1)& filters.private)
async def get_model(_, c):
	if len(c.text) < 2:
		await c.reply("üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f'was/used')]]))
	else:
		buy_budjet[c.from_user.id] = 0
		budjet[c.from_user.id] = c.text
		await c.reply(f"üí∞–¶–µ–Ω–∞ –¥–æ: {budjet[c.from_user.id]}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__",reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"contact_inform_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_budjet')]]))


@app.on_message(filters.create(lambda _, __, c: buy_contact[c.from_user.id] == 1)& filters.private)
async def get_contacts(_, c):
	if len(c.text) < 2:
		await app.send_message(c.chat.id, "üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f"budjet_w/u")]]))

	else:
		buy_contact[c.from_user.id] = 0
		contact[c.from_user.id] = c.text
		await app.send_message(c.chat.id, f"üìû–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {c.text}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"city_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_contact')]]))


@app.on_message(filters.create(lambda _, __, c: buy_city[c.from_user.id] == 1)& filters.private)
async def get_city(_, c):
	if len(c.text) < 2:
		await app.send_message(c.chat.id,  "üò•__–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçé–í–µ—Ä–Ω—É—Ç—å—Å—è", f"city_w/u")]]))

	else:
		city[c.from_user.id] = c.text
		buy_city[c.from_user.id] = 0
		await app.send_message(c.chat.id, f"üèô–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞: {c.text}\n__–Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ** –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ__", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", f"post_w/u")], [InlineKeyboardButton("üìä–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", f'new_city')]]))





@app.on_callback_query(filters.create(lambda _, __, c: "send_to_chat_buy" in c.data))
async def sendtochatBuyPostButton(_, c):
	user_id = c.from_user.id
	name = c.from_user.first_name
	device = model[c.from_user.id]
	whats_trade = budjet[c.from_user.id]
	place = city[c.from_user.id]
	reg_date = data()
	reg_date = reg_date[0] + " " + reg_date[1]
	text = f"""
	üíº–ü–æ—Å—Ç –æ –ø–æ–∫—É–ø–∫–µ:

	```{device}```

	__{desc}__

	üí∞–¶–µ–Ω–∞ –¥–æ: ```{whats_trade}```

	{place}
	‚òé–ö–æ–Ω—Ç–∞–∫—Ç—ã/—Ç–≥: {contact[c.from_user.id]}
				"""
	inf_list = (user_id, c.id, text, device, name, place, "–ø–æ–∫—É–ø–∫–∞", reg_date,
						whats_trade)
	BotDB.AddPost(inf_list)
	await c.edit_message_text("‚úÖ–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É @apple_belarus", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìä–º–µ–Ω—é", f"menu")]]))
	await app.send_message('apple_belarus', text + "\n\nü§ñ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: @vo7_bot")
	
	model.pop(c.from_user.id)
	budjet.pop(c.from_user.id)
	contact.pop(c.from_user.id)
	city.pop(c.from_user.id)





@app.on_message(filters.new_chat_members, group=1)
async def NewChatMember(_, c):
	await app.restrict_chat_member(c.chat.id, c.from_user.id, ChatPermissions())
	await app.send_message(c.chat.id, f"üíª–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {c.from_user.mention()}!\n–†–∞–¥—ã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ @apple_belarus ü§ì\nüìÉ–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã @vo7_bot!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ü§ñ–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", url="https://t.me/vo7_bot")]]))

@app.on_callback_query(filters.create(lambda _, __, c: "from chat to ct" == c.data))
async def edit_sendcatalog(_, c):
	photo_counter[c.from_user.id] = 0
	sell_photo[c.from_user.id] = 0
	sell_model[c.from_user.id] = 0
	sell_budjet[c.from_user.id] = 0
	sell_city[c.from_user.id] = 0
	sell_description[c.from_user.id] = 0
	sell_contact[c.from_user.id] = 0

	#buy_data
	buy_photo[c.from_user.id] = 0
	buy_model[c.from_user.id] = 0
	buy_budjet[c.from_user.id] = 0
	buy_city[c.from_user.id] = 0
	buy_description[c.from_user.id] = 0
	buy_contact[c.from_user.id] = 0
	await c.answer("ü§ì–í–∞–º –Ω–∞–ø–∏—Å–∞–ª @vo7_bot\nüöÄ–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", True)
	await app.send_message(c.from_user.id, "**üöÄ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥**\n__–ò—â–∏ –∫–ª–∏–µ–Ω—Ç–∞/–ø—Ä–æ–¥–æ–≤—Ü–∞ —É–¥–æ–±–Ω–µ–µ!__", reply_markup=InlineKeyboardMarkup([

		[InlineKeyboardButton("üîç–ø–æ–∏—Å–∫", callback_data=f"catalogs_0")]]))


#@app.on_callback_query(filters.create(lambda _, __, c: "catalog" == c.data))
#async def edit_catalog(_, c):
#	photo_counter[c.from_user.id] = 0
#	sell_photo[c.from_user.id] = 0
#	sell_model[c.from_user.id] = 0
#	sell_budjet[c.from_user.id] = 0
#	sell_city[c.from_user.id] = 0
#	sell_description[c.from_user.id] = 0
#	sell_contact[c.from_user.id] = 0
#
#	#buy_data
#	buy_photo[c.from_user.id] = 0
#	buy_model[c.from_user.id] = 0
#	buy_budjet[c.from_user.id] = 0
#	buy_city[c.from_user.id] = 0
#	buy_description[c.from_user.id] = 0
#	buy_contact[c.from_user.id] = 0
#	await c.edit_message_text("**üöÄ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥**\n__–ò—â–∏ –∫–ª–∏–µ–Ω—Ç–∞/–ø—Ä–æ–¥–æ–≤—Ü–∞ —É–¥–æ–±–Ω–µ–µ!__", reply_markup=InlineKeyboardMarkup([
#
#		[InlineKeyboardButton("üîç–ø–æ–∏—Å–∫", callback_data=f"catalogs_0")]]))
#
#
#
#@app.on_message(filters.command('catalog', prefixes='*') & filters.private)
#async def on_Catalog(_, c):
#	photo_counter[c.from_user.id] = 0
#	sell_photo[c.from_user.id] = 0
#	sell_model[c.from_user.id] = 0
#	sell_budjet[c.from_user.id] = 0
#	sell_city[c.from_user.id] = 0
#	sell_description[c.from_user.id] = 0
#	sell_contact[c.from_user.id] = 0
#
#	#buy_data
#	buy_photo[c.from_user.id] = 0
#	buy_model[c.from_user.id] = 0
#	buy_budjet[c.from_user.id] = 0
#	buy_city[c.from_user.id] = 0
#	buy_description[c.from_user.id] = 0
#	buy_contact[c.from_user.id] = 0
#	count = len(BotDB.get_AllUsers())
#	print(count)
#	r_c = random.randint(1, count)
#	print(r_c)
#	await app.send_message(c.from_user.id, "**üöÄ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥**\n__–ò—â–∏ –∫–ª–∏–µ–Ω—Ç–∞/–ø—Ä–æ–¥–æ–≤—Ü–∞ —É–¥–æ–±–Ω–µ–µ!__", reply_markup=InlineKeyboardMarkup([

	#	[InlineKeyboardButton("üîç–ø–æ–∏—Å–∫", callback_data=f"catalogs_{r_c}")], [InlineKeyboardButton("üìÑ—Å–≤–æ–π –ø–æ—Å—Ç")]]))

def get_pagesmodel(i):
	model = BotDB.get_AllBuyOnly_model()[i]

	CONTENT = f"{model}"
	return str(CONTENT).strip("('',)")

def get_pagesprice(i):
	model = BotDB.get_AllBuyOnly_price()[i]
	CONTENT = f"{model}"

	return CONTENT.strip("('',)")
def get_pagescity(i):
	city = BotDB.get_AllBuyOnly_city()[i]
	CONTENT = f"{city}"

	return CONTENT.strip("('',)")
def get_pagesusername(i):
	city = BotDB.get_AllBuyOnly_username()[i]
	CONTENT = f"{city}"

	return CONTENT.strip("('',)")


def get_pagesid(idd):
	
	CONTENT = f"{idd}"

	return int(CONTENT.strip("('',)"))












#@app.on_callback_query(filters.create(lambda _, __, c: "catalogs_" in c.data))
#async def edit_catalogbuy(_, c):
#
#	row = int(c.data.split("catalogs_")[1])
#	find_model[c.from_user.id] = 0
#	model = get_pagesmodel(row)
#	price = get_pagesprice(row)
#	city = get_pagescity(row)
#	username = get_pagesusername(row)
#	content = f""" 
#	üì±–ú–æ–¥–µ–ª—å: {model}
#	üí∞–¶–µ–Ω–∞: {price}
#	üåÜ–ì–æ—Ä–æ–¥: {city}
#	‚òé–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}
#	"""
#	count = len(BotDB.get_AllUsers())
#	print(count)
#	r_c = random.randint(1, count)
#	print(r_c)
#
#	await c.edit_message_text(content, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç–ø–æ–∏—Å–∫", callback_data=f"catalogs_{r_c}")],[#InlineKeyboardButton("üìÑ—Ñ–∏–ª—å—Ç—Ä", callback_data=f"filter")], [InlineKeyboardButton("–Ω–∞–∑–∞–¥", f"catalog")]]))
#
#
#find_model = {}
#find_model_name = {}
#@app.on_callback_query(filters.create(lambda _, __, c: "filter" == c.data))
#async def edit_filter(_, c):
#	find_model[c.from_user.id] = 1
#	await c.edit_message_text("üöÄ–Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å\n–∫–æ—Ç–æ—Ä—É—é –∏—â–µ—Ç–µ\n\n**‚ùó–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑—ã–≤–∞—Ç—å\n—Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å**")
#
#USERS_FILTER = {}
#
#
#@app.on_message(filters.create(lambda _, __, c: find_model[c.from_user.id] == 1)& filters.private)
#async def get_findmodel(_, c):
#	count = 0
#	list_id = BotDB.get_Allid()
#	model_li = BotDB.get_Allmodel()
#	for i in model_li:
#		print(i)
#		if c.text in f'{i}':
#			count += 1
#	keyboard = []
#	if count == 0:
#		content = "‚ùå–ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
#		button = Button('–Ω–∞–∑–∞–¥', f'catalog')
#		keyboard.append([button.create()])
#	else:
#		
#		new_list_id = []
#		counter = 0
#		for i in model_li:
#			counter += 1
#			if c.text in f'{i}':
#				
#				new_list_id.append(counter)
#
#		row = 0
#		USERS_FILTER[c.from_user.id] = new_list_id
#		find_model_name[c.from_user.id] = c.text
#		idd = get_pagesid(new_list_id[row])
#		model = get_pagesmodel(idd)
#		price = get_pagesprice(idd)
#		city = get_pagescity(idd)
#		username = get_pagesusername(idd)
#		count_users = len(USERS_FILTER[c.from_user.id])
#		content = f""" 
#		üì±–ú–æ–¥–µ–ª—å: {model}
#		üí∞–¶–µ–Ω–∞: {price}
#		üåÜ–ì–æ—Ä–æ–¥: {city}
#		‚òé–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}
#
#		```{row + 1} –∏–∑ {count_users}```
#		
#		"""
#
#		button = Button('–¥–∞–ª–µ–µ', f'filtercats_{row + 1}')
#		button2 = Button('–Ω–∞–∑–∞–¥', f'catalog')
#		keyboard.append([button.create()])
#		keyboard.append([button2.create()])
#		
#
#		r_c = random.randint(1, count)
#
#	
#	markup = InlineKeyboardMarkup(keyboard)
#	await app.send_message(c.from_user.id, content, reply_markup=markup)
#	find_model[c.from_user.id] = 0
#	print(USERS_FILTER[c.from_user.id])
#
#
#

#@app.on_callback_query(filters.create(lambda _, __, c: "filtercats_" in c.data))
#async def edit_catalogbuy(_, c):
#	count = len(BotDB.get_AllUsers_by_model(find_model_name[c.from_user.id]))
#	keyboard = []
#	row = int(c.data.split("filtercats_")[1])
#	if row + 1 < 1:
#		await c.answer("‚ùå–¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
#	else:
#
#		list_id = BotDB.get_Allid()
#		model_li = BotDB.get_Allmodel()
#		try:
#			idd = get_pagesid(USERS_FILTER[c.from_user.id][row])
#		
#		except IndexError as e:
#			await c.answer("‚ùå–¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
#		
#		model = get_pagesmodel(idd)
#		price = get_pagesprice(idd)
#		city = get_pagescity(idd)
#		username = get_pagesusername(idd)
#		count_users = len(USERS_FILTER[c.from_user.id])
#		content = f""" 
#		üì±–ú–æ–¥–µ–ª—å: {model}
#		üí∞–¶–µ–Ω–∞: {price}
#		üåÜ–ì–æ—Ä–æ–¥: {city}
#		‚òé–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}
#
#
#		```{row + 1} –∏–∑ {count_users}```
#		
#		"""
#
#
#		
#		try:
#			button = Button('>>>', f'filtercats_{row + 1}')
#			button2 = Button('<<<', f'filtercats_{row - 1}')
#
#		except Exception as e:
#			await c.answer("‚ùå–¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
#
#		keyboard.append([button2.create(), button.create()])
#		keyboard.append([Button('–Ω–∞–∑–∞–¥', f'catalog').create()])
#		markup = InlineKeyboardMarkup(keyboard)
#		try:
#			await c.edit_message_text(content, reply_markup=markup)
#		
#		except pyrogram.errors.exceptions.bad_request_400.MessageNotModified as e:
#			await c.answer("‚ùå–¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")








app.run()